////
/// Flip Panel
/// @group panel
/// @since v0.8.43
////

/// Default settings

/// @example scss - Usage
///   .flip-panel {
///     @include flip-panel;
///   }
///
/// @example html - Default Markup
///   <div class="flip-panel [flipped]">
///     <div class="front">
///       <header>
///         <h1>Flip Panel Front</h1>
///       </header>
///
///       <div class="content">
///         <section>
///           Flip panel front section content
///         </section>
///       </div>
///
///       <footer>
///         <span><a>More information</a></span>
///       </footer>
///     </div> <!-- .front -->
///
///     <div class="back">
///       <header>
///         <h1><a><i class="back-icon"></i> Back to Front</a></h1>
///       </header>
///
///       <div class="content">
///         <section>
///           <p>Flip panel back content</p>
///         </section>
///       </div>
///     </div> <!-- .back -->
///   </div>
///
/// @example html - Custom panel style and back face with footer
///   Pass option `$with-footer: true` to `flip-panel`. It is advised to specify a min-height for the panel as well.
///
/// @example scss - Usage
///   .custom-flip-panel {
///     @include flip-panel(primary, $with-back-footer: true, $min-height: 400px);
///   }
///
/// @example html - Animation
///   Toggle class `.flipped` on the main selector to trigger the flipping animation
///

$flip-panel-default-settings: (
  header-height: panel-settings(header-height),
  footer-height: panel-settings(footer-height),
  icons: (
    back: long-arrow-left,
    forward: long-arrow-right
  ),
  transition-settings: .3s ease-in-out
);

$flip-panel: () !default;
$flip-panel: map-merge-settings($flip-panel-default-settings, $flip-panel);

$include-html-paint-flip-panel: true !default;

@function flip-panel-settings($setting, $property: null) {
  @if $property {
    @return map-get(map-get($flip-panel, $setting), $property);
  } @else {
    @return map-get($flip-panel, $setting);
  }
}

/// Generate icons used for the panel header
/// @access private

@mixin flip-panel-icons {
  $flip-panel-icons: flip-panel-settings(icons);

  @each $name, $icon in $flip-panel-icons {
    .#{$name}-icon {
      @include icon($icon);
    }
  }
}

/// Create the scrollable content block based on the presence of header and footer
/// @access private
/// @param {Boolean} $with-header [true] - Specify if the panel has a header
/// @param {Boolean} $with-footer [false] - Specify if the panel has a footer

@mixin flip-panel-scroll-content($with-header: true, $with-footer: false) {
  @if $with-header {
    top: flip-panel-settings(header-height);
  } @else {
    top: 0;
  }
  @if $with-footer {
    bottom: flip-panel-settings(footer-height);
  } @else {
    bottom: 0;
  }

  left: 0;
  overflow-y: auto;
  position: absolute;
  right: 0;
}

/// Mixin that generates the flip-panel styles
/// @access public
/// @param {Boolean} $with-front-header [true] - Specify if the panel front has a header
/// @param {Boolean} $with-front-footer [true] - Specify if the panel front has a footer
/// @param {Boolean} $with-back-header [true] - Specify if the panel back has a header
/// @param {Boolean} $with-back-footer [false] - Specify if the panel back has a footer
/// @param {value} $min-height [false] - Specify a fixed height for the panel

@mixin flip-panel (
  $style: default,
  $with-front-header: true,
  $with-front-footer: true,
  $with-back-header: true,
  $with-back-footer: false,
  $min-height: false) {

  @extend %grid-row;

  @if $min-height {
    min-height: $min-height;
  }

  perspective: 1000px;
  position: relative;
  transform-style: preserve-3d;

  .front,
  .back {
    @extend %panel-#{$style};

    @if $min-height {
      position: absolute;
    } @else {
      position: relative;
    }

    bottom: 0;
    left: 0;
    overflow: hidden;
    right: 0;
    top: 0;
    transform-style: preserve-3d;
    transition: transform flip-panel-settings(transition-settings),
      box-shadow flip-panel-settings(transition-settings);

    > footer {
      @if $min-height {
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
      }

      span {
        border-top: 1px solid color(border);
        display: block;
        font-weight: $font-weight-bold;
        line-height: flip-panel-settings(footer-height);
        padding: 0 $column-gutter / 2;
      }
    }

    > .content {
      > section {
        @extend %grid-row;

        border-top: 1px solid color(border);
        padding: $column-gutter / 4 $column-gutter / 2;
      }
    }
  }

  .front {
    transform: rotateX(0deg) rotateY(0deg);
    z-index: 300;

    @if $min-height {
      > .content {
        @include flip-panel-scroll-content (
          $with-header: $with-front-header,
          $with-footer: $with-front-footer);
      }
    }
  }

  .back {
    @include panel-background(color(white));

    position: absolute;
    transform: rotateY(-180deg);
    z-index: 200;

    > header > * {
      color: contrast(color(white), panel-settings(styles, $style), color(text, small));
      font-weight: $font-weight-extrabold !important;
    }

    > .content {
      @include flip-panel-scroll-content(
        $with-header: $with-back-header,
        $with-footer: $with-back-footer
      );
    }

    > footer {
      bottom: 0;
      left: 0;
      position: absolute;
      right: 0;
    }
  }

  &.flipped {
    .front,
    .back {
      box-shadow: 0 5px 5px rgba(0, 0, 0, .075);
    }

    .front {
      transform: rotateY(180deg);
      z-index: 200;
    }

    .back {
      transform: rotateX(0deg) rotateY(0deg);
      z-index: 300;
    }
  }

  &.no-css-transform {
    .back {
      opacity: 0;
    }

    &.flipped {
      .front,
      .back {
        box-shadow: 0;
        opacity: 1;
      }
    }
  }
}

@include exports('paint-flip-panel') {
  @if $include-html-paint-flip-panel {
    .flip-panel {
      @include flip-panel;

      header,
      footer {
        @include flip-panel-icons;
      }
    }
  }
}
