////
/// Typography
/// @group global
/// @since v1.0.0
////

// sass-lint:disable placeholder-in-extend

$font-defaults: (
  prefix: '%font',
  include-html-tags: true,

  family: unquote('"Helvetica Neue", Helvetica, sans-serif'),
  size: (
    rem-base: 13px,
    base: 1rem,
    small: 80%,
    tiny: 70%,

    h1: 1.5rem,
    h2: 1.375rem,
    h3: 1.125rem,
    h4: 1rem,
    h5: .875rem,
    h6: .8rem,
  ),
  weight: (
    light: 100,
    base: 300,
    bold: 400,
    extrabold: 600
  ),
  line-height: 1.5,
  smoothing: subpixel-antialiased,

  heading: (
    family: unquote('"Helvetica Neue", Helvetica, sans-serif'),

    weight: 300,
    line-height: 1.5,
    smoothing: antialiased,
  ),

  monospace: (
    family: 'Menlo, monospace',
    weight: 400
  ),

  link: (
    decoration: none
  ),

  blockquote: (
    size: 1.5rem,
    border: 6px
  ),

  condensed: (
    tags: h1 h2,
    value: -1px
  )
);

$font: () !default;
$font: map-merge-settings($font-defaults, $font);

@function font($settings...) {
  @return map-deep-get($font, $settings...);
}

@mixin font-placeholders {
  #{font(prefix)} {
    &-blockquote {
      border-left: font(blockquote, border) solid color(border);
      font-style: italic;
      margin: 0 0 gutter() gutter(small);
      padding-bottom: gutter();
      padding-left: gutter(small);
    }

    &-hr {
      background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 50%, color(border, dark) 50%);
      background-position: 0 50%;
      background-repeat: repeat-x;
      background-size: 100% 2px;
      border: 0;
      margin: 0;
      padding: gutter() 0;
    }

    &-base-smoothing {
      -webkit-font-smoothing: font(smoothing);
      text-rendering: optimizeLegibility;
    }

    &-heading-smoothing {
      -webkit-font-smoothing: font(heading, smoothing);
    }

    &-uppercase {
      font-kerning: normal;
      text-transform: uppercase;
    }

    &-smallcaps {
      font-feature-settings: 'smcp', 'kern';
      font-kerning: normal;
      letter-spacing: .1rem;
    }

    &-lining-numerals {
      font-feature-settings: 'lnum', 'kern';
    }

    &-heading {
      @extend #{font(prefix)}-heading-smoothing;

      color: color(heading);
      font-family: font(heading, family);
      font-feature-settings: 'dlig', 'liga', 'lnum', 'kern';
      font-style: normal;
      font-weight: font(heading, weight);
      line-height: font(heading, line-height);
      margin-bottom: 0;
      margin-top: 0;
    }

    @for $i from 1 to 6 {
      &-h#{$i} {
        @extend #{font(prefix)}-heading;

        font-size: font(size, h#{$i});
      }
    }
  }
}

@mixin font-tag-resets {
  html {
    font-size: font(size, rem-base);
  }

  body {
    @extend #{font(prefix)}-base-smoothing;

    font-family: font(family);
    font-style: normal;
    font-weight: font(weight, base);
    line-height: font(line-height);
  }

  a {
    color: color(link);
    text-decoration: font(link, decoration);
    transition: color .1s;

    &:hover,
    &:active,
    &:focus {
      color: color(link, hover);
      text-decoration: none;
    }
  }

  p {
    font-feature-settings: 'kern', 'liga';
    margin-top: 0;
  }

  @for $i from 1 to 6 {
    h#{$i} {
      @extend #{font(prefix)}-h#{$i};
    }
  }

  b,
  strong {
    font-weight: font(weight, bold);
  }

  em,
  i {
    font-style: italic;
  }

  small {
    font-size: font(size, small);
    font-style: normal;
    font-weight: font(weight, base);
  }

  blockquote {
    @extend #{font(prefix)}-blockquote;
  }

  hr {
    @extend #{font(prefix)}-hr;
  }

  code,
  pre {
    background-color: color(code, background);
    font-family: font(monospace, family);
  }

  pre {
    display: block;
    margin-bottom: gutter();
    padding: gutter(small);
    white-space: pre-wrap;
    word-break: break-all;
    word-wrap: break-word;
  }
}

@mixin list-tag-resets {
  ul,
  ol {
    li {
      font-feature-settings: 'kern', 'liga';

      ol,
      ul {
        margin-left: gutter(small);
      }
    }
  }

  ol {
    list-style-type: decimal;

    li {
      @extend %_nested-list;

      &::before {
        content: '';
        font-feature-settings: 'lnum', 'tnum';
        margin-left: -3rem;
        position: absolute;
        text-align: right;
        width: 2em;
      }
    }
  }

  dl {
    dt,
    dd {
      font-feature-settings: 'kern', 'liga';
    }

    dt {
      font-weight: font(weight, bold);
    }

    dd + dt {
      padding-top: gutter(small);
    }
  }
}

%_nested-list {
  ul {
    li {
      @extend %_nested-o-list;

      &::before {
        content: '';
      }
    }
  }

  ol {
    list-style-type: decimal;

    li {
      @extend %_nested-sub-lists;

      &::before {
        content: '';
      }
    }
  }
}

%_nested-o-list {
  ol {
    list-style-type: decimal;

    li {
      &::before {
        content: '';
      }
    }
  }
}

%_nested-sub-lists {
  ul {
    li {
      &::before {
        content: '';
      }
    }
  }

  ol {
    list-style-type: decimal;

    li {
      &::before {
        content: '';
      }
    }
  }
}

@mixin font-condensed {
  @each $tag in font(condensed, tags) {
    #{$tag} {
      letter-spacing: font(condensed, value);
    }
  }
}

@include exports('paint-typography') {
  @include font-placeholders;

  @if font(include-html-tags) {
    @include font-tag-resets;
    @include font-condensed;
    @include list-tag-resets;
  }
}
